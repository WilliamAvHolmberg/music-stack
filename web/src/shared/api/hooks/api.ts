/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AnalyzeRequestDTO,
  AnswerAnalysisDTO,
  FlashcardDTO,
  FlashcardSetDTO,
  GenerateFlashcardsRequestDTO,
  HealthStatusDTO,
  PostApiFlashcardsFlashcardIdAnalyzeParams,
  PostApiFlashcardsGenerateStructureStudyStructureIdParams,
  PutApiFlashcardsFlashcardIdParams,
  ReviewRequestDTO,
  ReviewStatisticsDTO,
  StudyStructureDTO
} from '../models'
import { customClient } from '../client';
import type { ErrorType } from '../client';



export const postApiFlashcardsGenerateStructureStudyStructureId = (
    studyStructureId: number,
    params?: PostApiFlashcardsGenerateStructureStudyStructureIdParams,
 signal?: AbortSignal
) => {
      
      
      return customClient<FlashcardSetDTO>(
      {url: `/api/Flashcards/generate/structure/${studyStructureId}`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostApiFlashcardsGenerateStructureStudyStructureIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsGenerateStructureStudyStructureId>>, TError,{studyStructureId: number;params?: PostApiFlashcardsGenerateStructureStudyStructureIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsGenerateStructureStudyStructureId>>, TError,{studyStructureId: number;params?: PostApiFlashcardsGenerateStructureStudyStructureIdParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFlashcardsGenerateStructureStudyStructureId>>, {studyStructureId: number;params?: PostApiFlashcardsGenerateStructureStudyStructureIdParams}> = (props) => {
          const {studyStructureId,params} = props ?? {};

          return  postApiFlashcardsGenerateStructureStudyStructureId(studyStructureId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFlashcardsGenerateStructureStudyStructureIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFlashcardsGenerateStructureStudyStructureId>>>
    
    export type PostApiFlashcardsGenerateStructureStudyStructureIdMutationError = ErrorType<unknown>

    export const usePostApiFlashcardsGenerateStructureStudyStructureId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsGenerateStructureStudyStructureId>>, TError,{studyStructureId: number;params?: PostApiFlashcardsGenerateStructureStudyStructureIdParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiFlashcardsGenerateStructureStudyStructureId>>,
        TError,
        {studyStructureId: number;params?: PostApiFlashcardsGenerateStructureStudyStructureIdParams},
        TContext
      > => {

      const mutationOptions = getPostApiFlashcardsGenerateStructureStudyStructureIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiFlashcardsGenerateContent = (
    generateFlashcardsRequestDTO: GenerateFlashcardsRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<FlashcardSetDTO>(
      {url: `/api/Flashcards/generate/content`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generateFlashcardsRequestDTO, signal
    },
      );
    }
  


export const getPostApiFlashcardsGenerateContentMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsGenerateContent>>, TError,{data: GenerateFlashcardsRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsGenerateContent>>, TError,{data: GenerateFlashcardsRequestDTO}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFlashcardsGenerateContent>>, {data: GenerateFlashcardsRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiFlashcardsGenerateContent(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFlashcardsGenerateContentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFlashcardsGenerateContent>>>
    export type PostApiFlashcardsGenerateContentMutationBody = GenerateFlashcardsRequestDTO
    export type PostApiFlashcardsGenerateContentMutationError = ErrorType<unknown>

    export const usePostApiFlashcardsGenerateContent = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsGenerateContent>>, TError,{data: GenerateFlashcardsRequestDTO}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiFlashcardsGenerateContent>>,
        TError,
        {data: GenerateFlashcardsRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiFlashcardsGenerateContentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiFlashcardsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customClient<FlashcardSetDTO>(
      {url: `/api/Flashcards/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFlashcardsIdQueryKey = (id: number,) => {
    return [`/api/Flashcards/${id}`] as const;
    }

    
export const getGetApiFlashcardsIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsId>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcardsId>>> = ({ signal }) => getApiFlashcardsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcardsId>>>
export type GetApiFlashcardsIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiFlashcardsIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsId>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsId>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsId>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsId>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiFlashcardsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFlashcardsId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcardsId>>> = ({ signal }) => getApiFlashcardsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcardsId>>>
export type GetApiFlashcardsIdQueryError = ErrorType<unknown>


export function useGetApiFlashcardsId<TData = Awaited<ReturnType<typeof getApiFlashcardsId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsId<TData = Awaited<ReturnType<typeof getApiFlashcardsId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsId<TData = Awaited<ReturnType<typeof getApiFlashcardsId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsId<TData = Awaited<ReturnType<typeof getApiFlashcardsId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiFlashcardsId = (
    id: number,
 ) => {
      
      
      return customClient<void>(
      {url: `/api/Flashcards/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiFlashcardsIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFlashcardsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiFlashcardsId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiFlashcardsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiFlashcardsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiFlashcardsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFlashcardsId>>>
    
    export type DeleteApiFlashcardsIdMutationError = ErrorType<unknown>

    export const useDeleteApiFlashcardsId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFlashcardsId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiFlashcardsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiFlashcardsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiFlashcards = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<FlashcardSetDTO[]>(
      {url: `/api/Flashcards`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFlashcardsQueryKey = () => {
    return [`/api/Flashcards`] as const;
    }

    
export const getGetApiFlashcardsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcards>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcards>>> = ({ signal }) => getApiFlashcards(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcards>>>
export type GetApiFlashcardsInfiniteQueryError = ErrorType<unknown>


export function useGetApiFlashcardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcards>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcards>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcards>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcards>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcards>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcards>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiFlashcardsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFlashcards>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcards>>> = ({ signal }) => getApiFlashcards(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcards>>>
export type GetApiFlashcardsQueryError = ErrorType<unknown>


export function useGetApiFlashcards<TData = Awaited<ReturnType<typeof getApiFlashcards>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcards>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcards<TData = Awaited<ReturnType<typeof getApiFlashcards>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcards>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcards<TData = Awaited<ReturnType<typeof getApiFlashcards>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcards<TData = Awaited<ReturnType<typeof getApiFlashcards>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcards>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiFlashcardsFlashcardId = (
    id: number,
    params?: PutApiFlashcardsFlashcardIdParams,
 ) => {
      
      
      return customClient<FlashcardDTO>(
      {url: `/api/Flashcards/flashcard/${id}`, method: 'PUT',
        params
    },
      );
    }
  


export const getPutApiFlashcardsFlashcardIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFlashcardsFlashcardId>>, TError,{id: number;params?: PutApiFlashcardsFlashcardIdParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiFlashcardsFlashcardId>>, TError,{id: number;params?: PutApiFlashcardsFlashcardIdParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiFlashcardsFlashcardId>>, {id: number;params?: PutApiFlashcardsFlashcardIdParams}> = (props) => {
          const {id,params} = props ?? {};

          return  putApiFlashcardsFlashcardId(id,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiFlashcardsFlashcardIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiFlashcardsFlashcardId>>>
    
    export type PutApiFlashcardsFlashcardIdMutationError = ErrorType<unknown>

    export const usePutApiFlashcardsFlashcardId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFlashcardsFlashcardId>>, TError,{id: number;params?: PutApiFlashcardsFlashcardIdParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiFlashcardsFlashcardId>>,
        TError,
        {id: number;params?: PutApiFlashcardsFlashcardIdParams},
        TContext
      > => {

      const mutationOptions = getPutApiFlashcardsFlashcardIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiFlashcardsFlashcardIdAnalyze = (
    id: number,
    postApiFlashcardsFlashcardIdAnalyzeBody: string,
    params?: PostApiFlashcardsFlashcardIdAnalyzeParams,
 signal?: AbortSignal
) => {
      
      
      return customClient<AnswerAnalysisDTO>(
      {url: `/api/Flashcards/flashcard/${id}/analyze`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiFlashcardsFlashcardIdAnalyzeBody,
        params, signal
    },
      );
    }
  


export const getPostApiFlashcardsFlashcardIdAnalyzeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsFlashcardIdAnalyze>>, TError,{id: number;data: string;params?: PostApiFlashcardsFlashcardIdAnalyzeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsFlashcardIdAnalyze>>, TError,{id: number;data: string;params?: PostApiFlashcardsFlashcardIdAnalyzeParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFlashcardsFlashcardIdAnalyze>>, {id: number;data: string;params?: PostApiFlashcardsFlashcardIdAnalyzeParams}> = (props) => {
          const {id,data,params} = props ?? {};

          return  postApiFlashcardsFlashcardIdAnalyze(id,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFlashcardsFlashcardIdAnalyzeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFlashcardsFlashcardIdAnalyze>>>
    export type PostApiFlashcardsFlashcardIdAnalyzeMutationBody = string
    export type PostApiFlashcardsFlashcardIdAnalyzeMutationError = ErrorType<unknown>

    export const usePostApiFlashcardsFlashcardIdAnalyze = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFlashcardsFlashcardIdAnalyze>>, TError,{id: number;data: string;params?: PostApiFlashcardsFlashcardIdAnalyzeParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiFlashcardsFlashcardIdAnalyze>>,
        TError,
        {id: number;data: string;params?: PostApiFlashcardsFlashcardIdAnalyzeParams},
        TContext
      > => {

      const mutationOptions = getPostApiFlashcardsFlashcardIdAnalyzeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiFlashcardsIdDue = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customClient<FlashcardDTO[]>(
      {url: `/api/Flashcards/${id}/due`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFlashcardsIdDueQueryKey = (id: number,) => {
    return [`/api/Flashcards/${id}/due`] as const;
    }

    
export const getGetApiFlashcardsIdDueInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsIdDueQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>> = ({ signal }) => getApiFlashcardsIdDue(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsIdDueInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>
export type GetApiFlashcardsIdDueInfiniteQueryError = ErrorType<unknown>


export function useGetApiFlashcardsIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsIdDueInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiFlashcardsIdDueQueryOptions = <TData = Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsIdDueQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>> = ({ signal }) => getApiFlashcardsIdDue(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsIdDueQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>>
export type GetApiFlashcardsIdDueQueryError = ErrorType<unknown>


export function useGetApiFlashcardsIdDue<TData = Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdDue<TData = Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdDue<TData = Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsIdDue<TData = Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdDue>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsIdDueQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiFlashcardsIdStatistics = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customClient<ReviewStatisticsDTO>(
      {url: `/api/Flashcards/${id}/statistics`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFlashcardsIdStatisticsQueryKey = (id: number,) => {
    return [`/api/Flashcards/${id}/statistics`] as const;
    }

    
export const getGetApiFlashcardsIdStatisticsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsIdStatisticsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>> = ({ signal }) => getApiFlashcardsIdStatistics(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsIdStatisticsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>
export type GetApiFlashcardsIdStatisticsInfiniteQueryError = ErrorType<unknown>


export function useGetApiFlashcardsIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsIdStatisticsInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiFlashcardsIdStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFlashcardsIdStatisticsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>> = ({ signal }) => getApiFlashcardsIdStatistics(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiFlashcardsIdStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>>
export type GetApiFlashcardsIdStatisticsQueryError = ErrorType<unknown>


export function useGetApiFlashcardsIdStatistics<TData = Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdStatistics<TData = Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiFlashcardsIdStatistics<TData = Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiFlashcardsIdStatistics<TData = Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFlashcardsIdStatistics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiFlashcardsIdStatisticsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiHealth = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<HealthStatusDTO>(
      {url: `/api/Health`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiHealthQueryKey = () => {
    return [`/api/Health`] as const;
    }

    
export const getGetApiHealthInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiHealth>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({ signal }) => getApiHealth(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiHealthInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHealth>>>
export type GetApiHealthInfiniteQueryError = ErrorType<unknown>


export function useGetApiHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiHealth>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiHealth>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiHealth>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiHealth>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiHealth>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiHealth>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiHealthInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiHealthQueryOptions = <TData = Awaited<ReturnType<typeof getApiHealth>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({ signal }) => getApiHealth(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHealth>>>
export type GetApiHealthQueryError = ErrorType<unknown>


export function useGetApiHealth<TData = Awaited<ReturnType<typeof getApiHealth>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiHealth>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiHealth<TData = Awaited<ReturnType<typeof getApiHealth>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiHealth>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiHealth<TData = Awaited<ReturnType<typeof getApiHealth>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiHealth<TData = Awaited<ReturnType<typeof getApiHealth>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiHealthQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiReviewFlashcardSetIdDue = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customClient<FlashcardDTO[]>(
      {url: `/api/Review/flashcard-set/${id}/due`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiReviewFlashcardSetIdDueQueryKey = (id: number,) => {
    return [`/api/Review/flashcard-set/${id}/due`] as const;
    }

    
export const getGetApiReviewFlashcardSetIdDueInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiReviewFlashcardSetIdDueQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>> = ({ signal }) => getApiReviewFlashcardSetIdDue(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiReviewFlashcardSetIdDueInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>
export type GetApiReviewFlashcardSetIdDueInfiniteQueryError = ErrorType<unknown>


export function useGetApiReviewFlashcardSetIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiReviewFlashcardSetIdDueInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiReviewFlashcardSetIdDueInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiReviewFlashcardSetIdDueQueryOptions = <TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiReviewFlashcardSetIdDueQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>> = ({ signal }) => getApiReviewFlashcardSetIdDue(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiReviewFlashcardSetIdDueQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>>
export type GetApiReviewFlashcardSetIdDueQueryError = ErrorType<unknown>


export function useGetApiReviewFlashcardSetIdDue<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdDue<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdDue<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiReviewFlashcardSetIdDue<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdDue>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiReviewFlashcardSetIdDueQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiReviewFlashcardIdReview = (
    id: number,
    reviewRequestDTO: ReviewRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<ReviewStatisticsDTO>(
      {url: `/api/Review/flashcard/${id}/review`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reviewRequestDTO, signal
    },
      );
    }
  


export const getPostApiReviewFlashcardIdReviewMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiReviewFlashcardIdReview>>, TError,{id: number;data: ReviewRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiReviewFlashcardIdReview>>, TError,{id: number;data: ReviewRequestDTO}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiReviewFlashcardIdReview>>, {id: number;data: ReviewRequestDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiReviewFlashcardIdReview(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiReviewFlashcardIdReviewMutationResult = NonNullable<Awaited<ReturnType<typeof postApiReviewFlashcardIdReview>>>
    export type PostApiReviewFlashcardIdReviewMutationBody = ReviewRequestDTO
    export type PostApiReviewFlashcardIdReviewMutationError = ErrorType<unknown>

    export const usePostApiReviewFlashcardIdReview = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiReviewFlashcardIdReview>>, TError,{id: number;data: ReviewRequestDTO}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiReviewFlashcardIdReview>>,
        TError,
        {id: number;data: ReviewRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiReviewFlashcardIdReviewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiReviewFlashcardSetIdStatistics = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customClient<ReviewStatisticsDTO>(
      {url: `/api/Review/flashcard-set/${id}/statistics`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiReviewFlashcardSetIdStatisticsQueryKey = (id: number,) => {
    return [`/api/Review/flashcard-set/${id}/statistics`] as const;
    }

    
export const getGetApiReviewFlashcardSetIdStatisticsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiReviewFlashcardSetIdStatisticsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>> = ({ signal }) => getApiReviewFlashcardSetIdStatistics(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiReviewFlashcardSetIdStatisticsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>
export type GetApiReviewFlashcardSetIdStatisticsInfiniteQueryError = ErrorType<unknown>


export function useGetApiReviewFlashcardSetIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiReviewFlashcardSetIdStatisticsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiReviewFlashcardSetIdStatisticsInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiReviewFlashcardSetIdStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiReviewFlashcardSetIdStatisticsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>> = ({ signal }) => getApiReviewFlashcardSetIdStatistics(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiReviewFlashcardSetIdStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>>
export type GetApiReviewFlashcardSetIdStatisticsQueryError = ErrorType<unknown>


export function useGetApiReviewFlashcardSetIdStatistics<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdStatistics<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiReviewFlashcardSetIdStatistics<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiReviewFlashcardSetIdStatistics<TData = Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReviewFlashcardSetIdStatistics>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiReviewFlashcardSetIdStatisticsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiStudyAnalyze = (
    analyzeRequestDTO: AnalyzeRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customClient<StudyStructureDTO>(
      {url: `/api/Study/analyze`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: analyzeRequestDTO, signal
    },
      );
    }
  


export const getPostApiStudyAnalyzeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiStudyAnalyze>>, TError,{data: AnalyzeRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiStudyAnalyze>>, TError,{data: AnalyzeRequestDTO}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiStudyAnalyze>>, {data: AnalyzeRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiStudyAnalyze(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiStudyAnalyzeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiStudyAnalyze>>>
    export type PostApiStudyAnalyzeMutationBody = AnalyzeRequestDTO
    export type PostApiStudyAnalyzeMutationError = ErrorType<unknown>

    export const usePostApiStudyAnalyze = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiStudyAnalyze>>, TError,{data: AnalyzeRequestDTO}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiStudyAnalyze>>,
        TError,
        {data: AnalyzeRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiStudyAnalyzeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiStudy = (
    
 signal?: AbortSignal
) => {
      
      
      return customClient<StudyStructureDTO[]>(
      {url: `/api/Study`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiStudyQueryKey = () => {
    return [`/api/Study`] as const;
    }

    
export const getGetApiStudyInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiStudy>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStudyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStudy>>> = ({ signal }) => getApiStudy(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiStudyInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStudy>>>
export type GetApiStudyInfiniteQueryError = ErrorType<unknown>


export function useGetApiStudyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudy>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudy>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudy>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudy>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudy>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiStudyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudy>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiStudyInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiStudyQueryOptions = <TData = Awaited<ReturnType<typeof getApiStudy>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStudyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStudy>>> = ({ signal }) => getApiStudy(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiStudyQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStudy>>>
export type GetApiStudyQueryError = ErrorType<unknown>


export function useGetApiStudy<TData = Awaited<ReturnType<typeof getApiStudy>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudy>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudy<TData = Awaited<ReturnType<typeof getApiStudy>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudy>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudy<TData = Awaited<ReturnType<typeof getApiStudy>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiStudy<TData = Awaited<ReturnType<typeof getApiStudy>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudy>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiStudyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiStudyId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customClient<StudyStructureDTO>(
      {url: `/api/Study/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiStudyIdQueryKey = (id: number,) => {
    return [`/api/Study/${id}`] as const;
    }

    
export const getGetApiStudyIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getApiStudyId>>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStudyIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStudyId>>> = ({ signal }) => getApiStudyId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiStudyIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStudyId>>>
export type GetApiStudyIdInfiniteQueryError = ErrorType<unknown>


export function useGetApiStudyIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudyId>>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudyId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudyIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudyId>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudyId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudyIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudyId>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiStudyIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getApiStudyId>>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiStudyIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetApiStudyIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiStudyId>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStudyIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStudyId>>> = ({ signal }) => getApiStudyId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiStudyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStudyId>>>
export type GetApiStudyIdQueryError = ErrorType<unknown>


export function useGetApiStudyId<TData = Awaited<ReturnType<typeof getApiStudyId>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudyId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudyId<TData = Awaited<ReturnType<typeof getApiStudyId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStudyId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiStudyId<TData = Awaited<ReturnType<typeof getApiStudyId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetApiStudyId<TData = Awaited<ReturnType<typeof getApiStudyId>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStudyId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiStudyIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




